const uuid = require('uuid');
const dbClient = require('../utils/db.js');
const redisClient = require('../utils/redis.js');

async function postUpload(req, res) {
  const token = req.headers['x-token'];
  let userCollection = dbClient.db.collection('users');
  let fileCollection = dbClient.db.collection('files');
  const key = `auth_${token}`;
  const id = await redisClient.get(key);
  let objects = await userCollection.find().toArray();
  for (let object of objects) {
    if (object._id.toString() === id.toString()) {
      //write code
      let { name, type, parentId, isPublic, data } = req.body;
      if (!name) res.status(400).json({'error': 'Missing name'});
      if (!type) res.status(400).json({'error': 'Missing type'});
      if (type) {
          let tracker = false;
        const allowedType = ['folder', 'file', 'image'];
        for (let item of allowedType) {
          if (item === type) tracker = true
	}
	if (tracker === false) res.status(400).json({'error': 'Missing type'});
      }
      if (!data) {
        if (type !=== 'folder') res.status(400).json({'error': 'Missing data'});
      }
      if (!parentId) {
        parentId = 0;
      } else {
        //let fileCollection = dbClient.db.collection('files');
	let savedFile = fileCollection.find({'parentId': parentId}).toArray();
	if (savedFile.length === 0) res.status(400).json({'error': 'Parent not found'});
	if (savedFile[0].type !== 'folder') res.status(400).json({'error': 'Parent is not a folder'});
      }
      if (!isPublic) isPublic = false;
      if (type === 'folder') {
        // add document in DB
        let savedFolder = fileCollection.insertOne({'userId': id.toString(), 'name': name, 'type': type, 'isPublic': isPublic, 'parentId': parentId});
	res.status(201).json({'id': savedFolder[0].ops._id, 'userId': id.toString(), 'name': name, 'type': type, 'isPublic': isPublic, 'parentId': parentId});
      } else {
	//save locally
	let folderPath = process.env.FOLDER_PATH || '/tmp/files_manager';
	let filename = uuid.v4();
	let decodedData = Buffer.from(data, 'base4').toString();
	//*****GOOGLE HOW TO SAVE decodedData to folderPAth as filename
        let savedFile = fileCollection.insertOne({'userId': id.toString(), 'name': name, 'type': type, 'isPublic': isPublic, 'parentId': parentId});
	res.status(201).json({'id': savedFile[0].ops._id, 'userId': id.toString(), 'name': name, 'type': type, 'isPublic': isPublic, 'parentId': parentId});
      }
      //end code
    }
  }
  //no user associated wit that token
  res.status(401).json({'error': 'Unauthorized'})
}

module.exports = { postUpload };
